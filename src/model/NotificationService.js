import PushNotification from 'react-native-push-notification';
import {
  PushNotificationIOS
} from 'react-native';

class NotificationService {
  constructor() {
    this.listeners = [];
    PushNotification.configure({
      // (required) Called when a remote or local notification is opened or received
      onNotification: this._onNotification,
    });
  }

  _onNotification = ((notif) => {
    if (notif.userInteraction) {
      for (callback in this.listeners) {
        callback(notif);
      }
    }
    notif.finish(PushNotificationIOS.FetchResult.NoData);
  });

  registerListener = ((callback) => {
    this.listeners(callback);
  });

  unregisterListener = ((callback) => {
    this.listeners = this.listeners.filter(subscriber => subscriber !== callback);
  });

  // notif looks like {id: ,date: ,title: ,message: }
  scheduleNotification = (notif) => {
    PushNotification.localNotificationSchedule({
      date: notif.date,

      /* Android Only Properties */
      id: notif.id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID

      /* iOS only properties */
      alertAction: 'view', // (optional) default: view
      category: null, // (optional) default: null
      userInfo: { id: notif.id }, // (optional) default: null (object containing additional notification data)

      /* iOS and Android properties */
      title: notif.title, // (optional)
      message: notif.message, // (required)
      playSound: true, // (optional) default: true
      soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
    });
  }

  cancelNotification = ((id) => {
    PushNotification.cancelLocalNotifications({ id });
  });

  cancelAllNotifications = (() => {
    PushNotification.cancelAllLocalNotifications();
  });
}

const NotificationManager = new NotificationService();
export default NotificationManager;
